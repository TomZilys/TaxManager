//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaxManager.Tests.TaxManagerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaxManagerService.ITaxManagerService")]
    public interface ITaxManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaxManagerService/InsertMunicipalityTax", ReplyAction="http://tempuri.org/ITaxManagerService/InsertMunicipalityTaxResponse")]
        bool InsertMunicipalityTax(TaxManager.Models.MunicipalityTaxDTO municipalityTaxDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaxManagerService/InsertMunicipalityTax", ReplyAction="http://tempuri.org/ITaxManagerService/InsertMunicipalityTaxResponse")]
        System.Threading.Tasks.Task<bool> InsertMunicipalityTaxAsync(TaxManager.Models.MunicipalityTaxDTO municipalityTaxDto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaxManagerServiceChannel : TaxManager.Tests.TaxManagerService.ITaxManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaxManagerServiceClient : System.ServiceModel.ClientBase<TaxManager.Tests.TaxManagerService.ITaxManagerService>, TaxManager.Tests.TaxManagerService.ITaxManagerService {
        
        public TaxManagerServiceClient() {
        }
        
        public TaxManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaxManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaxManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaxManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertMunicipalityTax(TaxManager.Models.MunicipalityTaxDTO municipalityTaxDto) {
            return base.Channel.InsertMunicipalityTax(municipalityTaxDto);
        }
        
        public System.Threading.Tasks.Task<bool> InsertMunicipalityTaxAsync(TaxManager.Models.MunicipalityTaxDTO municipalityTaxDto) {
            return base.Channel.InsertMunicipalityTaxAsync(municipalityTaxDto);
        }
    }
}
